parameters:
  buildConfiguration: "Release"
  pool: Default
  CASCADES: []

jobs:
  - job: "DotNet_Build"
    pool: ${{ parameters.pool }}
    variables:
      - group: global-var-pipelines
      - name: sharedPackagesFolder
        value: "/root/.nuget/dolittle-packages/${{ variables.Build.Repository.Name }}"

    steps:
      - script: echo $(sharedPackagesFolder)
  #     - checkout: self
  #       submodules: recursive

  #     - task: Dolittle.tasks.SetupBuildContext.SetupBuildContext@0
  #       name: Context
  #       displayName: Setting up context
  #       inputs:
  #         Connection: 'service-dolittle-build'

  #     - task: Dolittle.tasks.CalculateNewVersion.CalculateNewVersion@0
  #       name: NewVersion
  #       displayName: Calculating new version
  #       inputs:
  #         PreviousVersion: $(Context.PreviousVersion)
  #         ReleaseType: $(Context.ReleaseType)
      
  #     - template: "./build.yml"
      
  #     - task: NuGetCommand@2
  #       displayName: Push Nuget packs
  #       condition: and(succeeded(), eq(variables['Context.ShouldPublish'], 'true'))
  #       inputs:
  #         command: push
  #         nugetFeedType: "external"
  #         packagesToPush: "/root/.nuget/dolittle-packages/**/*.nupkg;!/root/.nuget/dolittle-packages/**/*.symbols.nupkg"
  #         publishFeedCredentials: "myget_mathieu"

  #     - task: Dolittle.tasks.TagNewVersion.TagNewVersion@0
  #       condition: and(succeeded(), eq(variables['Context.ShouldPublish'], 'true'))
  #       displayName: Tagging new version
  #       inputs:
  #         Connection: 'service-dolittle-build'
  #         Version: $(NewVersion.NextVersion)

  #     - task: Dolittle.tasks.TriggerCascadingBuilds.TriggerCascadingBuilds@0
  #       condition: and(succeeded(), eq(variables['Context.ShouldPublish'], 'true'))
  #       displayName: Triggering cascading builds
  #       inputs:
  #         Connection: 'service-dolittle-build'
  #         ShouldPublish: $(Context.ShouldPublish)
  #         NextVersion: $(NewVersion.NextVersion)
  #         Cascades: ${{ join(',', parameters.CASCADES) }}


  # - job: "Cleanup"
  #   pool: ${{ parameters.pool }}
  #   dependsOn: [ "Cascading_Build", "Release", "Documentation" ]
  #   condition: always()
  #   steps:
  #     - checkout: none
      
  #     - script: ls /root/.nuget/dolittle-packages
  #       displayName: Packages before clean
      
  #     - script: rm -rf /root/.nuget/dolittle-packages/*
  #       displayName: Clean Packages

  #     - script: ls /root/.nuget/dolittle-packages
  #       displayName: Packages after clean
        
  #     - script: rm -rf $(Agent.BuildDirectory)/*
  #       displayName: Clean $(Agent.BuildDirectory)

  # - job: 'Documentation'
  #   pool: ${{ parameters.pool }}
  #   dependsOn: "Release"
  #   condition: succeeded()
  #   variables:
  #   - group: global-var-pipelines
  #   steps:
  #   - template: ../Documentation/documentation.yml
