parameters:
  buildConfiguration: "Release"
  pool: Default
  CASCADES: []

jobs:
  - job: "DotNet_Build"
    pool: ${{ parameters.pool }}
    variables:
      - group: global-var-pipelines
      - name: sharedPackagesFolder
        value: "/root/.nuget/dolittle-packages/$(Build.Repository.Name)"

    steps:
      - checkout: self
        submodules: recursive

      - script: rm -r $(sharedPackagesFolder) || true
        displayName: Cleaning packages folder

      - task: Dolittle.tasks.SetupBuildContext.SetupBuildContext@0
        name: Context
        displayName: Setting up context
        inputs:
          Connection: 'service-dolittle-build'

      - task: Dolittle.tasks.CalculateNewVersion.CalculateNewVersion@0
        name: NewVersion
        displayName: Calculating new version
        inputs:
          PreviousVersion: $(Context.PreviousVersion)
          ReleaseType: $(Context.ReleaseType)
      
      - template: "./build.yml"
      
      - template: "./publish.yml"
      # - task: NuGetCommand@2
      #   displayName: Push Nuget packs
      #   condition: and(succeeded(), eq(variables['Context.ShouldPublish'], 'true'))
      #   inputs:
      #     command: push
      #     nugetFeedType: "external"
      #     packagesToPush: "$(sharedPackagesFolder)/**/*.nupkg;!$(sharedPackagesFolder)/**/*.symbols.nupkg"
      #     publishFeedCredentials: "myget_mathieu"

      - task: Dolittle.tasks.TagNewVersion.TagNewVersion@0
        condition: and(succeeded(), eq(variables['Context.ShouldPublish'], 'true'))
        displayName: Tagging new version
        inputs:
          Connection: 'service-dolittle-build'
          Version: $(NewVersion.NextVersion)

      - task: Dolittle.tasks.TriggerCascadingBuilds.TriggerCascadingBuilds@0
        condition: and(succeeded(), eq(variables['Context.ShouldPublish'], 'true'), ne(variables['Context.ReleaseType'], 'major'))
        displayName: Triggering cascading builds
        inputs:
          Connection: 'service-dolittle-build'
          ShouldPublish: $(Context.ShouldPublish)
          NextVersion: $(NewVersion.NextVersion)
          Cascades: ${{ join(',', parameters.CASCADES) }}

  # - job: 'Documentation'
  #   pool: ${{ parameters.pool }}
  #   dependsOn: "Release"
  #   condition: succeeded()
  #   variables:
  #   - group: global-var-pipelines
  #   steps:
  #   - template: ../Documentation/documentation.yml
